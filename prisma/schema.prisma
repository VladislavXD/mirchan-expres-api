// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  email            String      @unique
  password         String? // Делаем опциональным для Google OAuth
  name             String?
  avatarUrl        String?
  avatarFrameUrl   String?
  backgroundUrl    String?
  usernameFrameUrl String?
  dateOfBirth      DateTime?
  role             String      @default("user") // "user", "moderator", "admin"
  isActive         Boolean     @default(true) // Активность аккаунта
  createdAt        DateTime    @default(now())
  updated          DateTime    @updatedAt
  bio              String?
  location         String?
  lastSeen         DateTime? // Время последней активности
  googleId         String? // Google OAuth ID
  provider         String? // "local" | "google"
  post             Post[]
  likes            Like[]
  comments         Comment[]
  followers        Follows[]   @relation("following")
  following        Follows[]   @relation("follower")
  modActions       ModAction[] @relation("ModActions")
  bansMade         Ban[]       @relation("BansMade")
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @db.ObjectId
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageUrl  String? // URL одного изображения из Cloudinary
  emojiUrls String[] // Массив URL emoji (gif)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  likes     Like[]
  views     String[] // Массив ID пользователей, просмотревших пост 
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
}

model Chat {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  participants  String[]  @db.ObjectId // IDs участников чата
  lastMessage   String? // Последнее сообщение для превью
  lastMessageAt DateTime? // Время последнего сообщения
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  senderId  String   @db.ObjectId
  chatId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Forum models
model MediaFile {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  url          String // URL файла в Cloudinary
  publicId     String // Public ID в Cloudinary для удаления
  name         String? // Оригинальное имя файла
  size         Int? // Размер файла в байтах
  type         String // Тип файла: "image" или "video"
  mimeType     String // MIME тип файла
  thumbnailUrl String? // URL превью в Cloudinary
  width        Int? // Ширина изображения/видео
  height       Int? // Высота изображения/видео
  duration     Int? // Длительность видео в секундах

  // Связи с постами
  threadId String? @db.ObjectId
  replyId  String? @db.ObjectId

  createdAt DateTime @default(now())

  thread Thread? @relation(fields: [threadId], references: [id], onDelete: Cascade)
  reply  Reply?  @relation(fields: [replyId], references: [id], onDelete: Cascade)
}

model Board {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String   @unique // /b/, /g/, /pol/ и т.д.
  title            String // "Random", "Technology", "Politics"
  description      String?
  isNsfw           Boolean  @default(false)
  maxFileSize      Int      @default(5242880) // 5MB в байтах
  allowedFileTypes String[] @default(["jpg", "jpeg", "png", "gif", "webp", "webm", "mp4"])
  postsPerPage     Int      @default(15)
  threadsPerPage   Int      @default(10)
  bumpLimit        Int      @default(500) // лимит постов в треде
  imageLimit       Int      @default(150) // лимит картинок в треде
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())

  threads Thread[]
  bans    Ban[]
}

model Thread {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  shortId    String  @unique // Короткий уникальный ID поста
  slug       String? // Человекочитаемый slug для URL
  boardId    String  @db.ObjectId
  subject    String? // Тема треда (опциональная)
  content    String // Содержимое OP поста
  authorName String? // Анонимное имя (опционально)
  authorTrip String? // Трипкод для идентификации
  posterHash String // Хеш IP для идентификации в треде

  // Cloudinary media data (множественные файлы)
  mediaFiles MediaFile[] // Массив медиафайлов

  // Deprecated single media fields (оставляем для обратной совместимости)
  imageUrl      String? // URL изображения в Cloudinary
  imagePublicId String? // Public ID в Cloudinary для удаления
  imageName     String? // Оригинальное имя файла
  imageSize     Int? // Размер файла в байтах
  thumbnailUrl  String? // URL превью в Cloudinary

  isPinned   Boolean @default(false) // Закрепленный тред
  isLocked   Boolean @default(false) // Заблокированный тред
  isClosed   Boolean @default(false) // Закрытый тред
  isArchived Boolean @default(false) // Архивированный

  replyCount    Int @default(0) // Количество ответов
  imageCount    Int @default(0) // Количество изображений
  uniquePosters Int @default(1) // Уникальные постеры

  lastBumpAt DateTime @default(now()) // Последний бамп
  createdAt  DateTime @default(now())

  board       Board       @relation(fields: [boardId], references: [id], onDelete: Cascade)
  replies     Reply[]
  threadTags  ThreadTag[]

  // Категория (иерархическая структура через Categories)
  categoryId String?     @db.ObjectId
  category   Categories? @relation(fields: [categoryId], references: [id])
}

model Reply {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  shortId    String  @unique // Короткий уникальный ID поста
  threadId   String  @db.ObjectId
  content    String // Содержимое поста
  authorName String? // Анонимное имя
  authorTrip String? // Трипкод
  posterHash String // Хеш постера в треде
  postNumber Int // Номер поста в треде (автоинкремент)

  // Cloudinary media data (множественные файлы)
  mediaFiles MediaFile[] // Массив медиафайлов
  imageCount Int         @default(0) // Количество медиафайлов

  // Deprecated single media fields (оставляем для обратной совместимости)
  imageUrl      String? // URL изображения в Cloudinary
  imagePublicId String? // Public ID в Cloudinary для удаления
  imageName     String? // Оригинальное имя файла
  imageSize     Int? // Размер файла
  thumbnailUrl  String? // URL превью в Cloudinary

  replyTo  String[] @default([]) // Ссылки на shortId постов, на которые отвечает
  quotedBy String[] @default([]) // Ссылки на shortId постов, которые цитируют этот

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  createdAt DateTime @default(now())

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([threadId, postNumber])
}

model ModAction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  moderatorId String   @db.ObjectId
  action      String // "delete_post", "ban_user", "pin_thread", etc.
  targetType  String // "thread", "reply", "user"
  targetId    String   @db.ObjectId
  reason      String?
  duration    Int? // Для банов - в часах
  createdAt   DateTime @default(now())

  moderator User @relation("ModActions", fields: [moderatorId], references: [id])
}

model Ban {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  ipHash      String // Хеш IP адреса
  boardId     String?   @db.ObjectId // null = глобальный бан
  reason      String
  moderatorId String    @db.ObjectId
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  board     Board? @relation(fields: [boardId], references: [id])
  moderator User   @relation("BansMade", fields: [moderatorId], references: [id])
}

// Forum categories & tags
model Categories {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String  @unique
  imageUrl    String?
  icon        String?
  color       String?
  description String?

  // Иерархия категорий
  parentId String?      @db.ObjectId
  parent   Categories?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Categories[] @relation("CategoryHierarchy")

  // Треды внутри категории (категория не содержит борды)
  threads Thread[]
  group String? 
}

// Теги с иконками/цветами
model Tag {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  icon        String?
  color       String?
  description String?
  createdAt   DateTime @default(now())

  // связи
  threadTags ThreadTag[]
}

// Удалена связь Борд-Тег: теги существуют только у тредов

// Связующая коллекция: Тред-Тег (many-to-many)
model ThreadTag {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  threadId String @db.ObjectId
  tagId    String @db.ObjectId

  thread Thread @relation(fields: [threadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([threadId, tagId])
}


