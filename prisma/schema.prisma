// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String    @unique
  password    String?   // Делаем опциональным для Google OAuth
  name        String?
  avatarUrl   String?
  avatarFrameUrl String?
  backgroundUrl String?
  usernameFrameUrl String?
  dateOfBirth DateTime?
  createdAt   DateTime  @default(now())
  updated     DateTime  @updatedAt
  bio         String?
  location    String?
  lastSeen    DateTime? // Время последней активности
  googleId    String?   @unique // Google OAuth ID
  provider    String?   // "local" | "google"
  post        Post[]
  likes       Like[]
  comments    Comment[]
  followers   Follows[] @relation("following")
  following   Follows[] @relation("follower")
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @db.ObjectId
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageUrl  String?   // URL одного изображения из Cloudinary
  emojiUrls String[]  // Массив URL emoji (gif)
  author   User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  likes     Like[]
  views     String[]  // Массив ID пользователей, просмотревших пост 
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
}

model Chat {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  participants String[]  @db.ObjectId // IDs участников чата
  lastMessage  String?   // Последнее сообщение для превью
  lastMessageAt DateTime? // Время последнего сообщения
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  senderId  String   @db.ObjectId
  chatId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
